# Generated by Django 5.1.3 on 2025-09-27 05:22

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('opportunities', '0003_add_crawler_models'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceRegistration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('device_type', models.CharField(choices=[('ios', 'iOS'), ('android', 'Android'), ('web', 'Web Browser')], max_length=20)),
                ('device_name', models.CharField(max_length=100)),
                ('device_fingerprint_hash', models.CharField(help_text='SHA256 hash of device fingerprint', max_length=64, unique=True)),
                ('is_trusted', models.BooleanField(default=False)),
                ('trust_established_at', models.DateTimeField(blank=True, null=True)),
                ('last_seen_at', models.DateTimeField(auto_now=True)),
                ('push_token', models.CharField(blank=True, max_length=255)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_attendees', models.PositiveIntegerField(blank=True, help_text='Maximum number of attendees allowed', null=True)),
                ('check_in_opens_at', models.DateTimeField(help_text='When check-in becomes available')),
                ('check_in_closes_at', models.DateTimeField(help_text='When check-in is no longer allowed')),
                ('require_device_registration', models.BooleanField(default=True, help_text='Whether attendees must register their devices')),
                ('allow_multiple_devices', models.BooleanField(default=False, help_text='Whether users can register multiple devices')),
                ('qr_rotation_seconds', models.PositiveIntegerField(default=60, help_text='How often QR codes rotate (minimum 30 seconds)', validators=[django.core.validators.MinValueValidator(30)])),
                ('allow_early_check_in_minutes', models.PositiveIntegerField(default=30, help_text='Minutes before event start to allow check-in')),
                ('allow_late_check_in_minutes', models.PositiveIntegerField(default=60, help_text='Minutes after event start to allow check-in')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('opportunity', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='event', to='opportunities.opportunity')),
            ],
        ),
        migrations.CreateModel(
            name='EventTicket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('server_token', models.CharField(editable=False, help_text='Secret token for server-side validation', max_length=64, unique=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancelled'), ('suspended', 'Suspended')], default='active', max_length=20)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('checked_in_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('check_in_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='check_ins', to='events.deviceregistration')),
                ('checked_in_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets_checked_in', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='events.event')),
                ('registered_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets', to='events.deviceregistration')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_tickets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CheckIn',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('scanned_data', models.TextField(help_text='Raw data from QR code')),
                ('result', models.CharField(choices=[('success', 'Success'), ('invalid_token', 'Invalid Token'), ('expired_token', 'Expired Token'), ('already_checked_in', 'Already Checked In'), ('invalid_device', 'Invalid Device'), ('ticket_cancelled', 'Ticket Cancelled'), ('user_not_verified', 'User Not Verified'), ('check_in_closed', 'Check-In Closed'), ('unknown_error', 'Unknown Error')], max_length=30)),
                ('result_message', models.TextField(blank=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('scanner_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scans_performed', to=settings.AUTH_USER_MODEL)),
                ('scanner_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scans_performed', to='events.deviceregistration')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='check_in_attempts', to='events.event')),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='check_in_attempts', to='events.eventticket')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='deviceregistration',
            index=models.Index(fields=['user', 'is_active'], name='events_devi_user_id_ae8d7f_idx'),
        ),
        migrations.AddIndex(
            model_name='deviceregistration',
            index=models.Index(fields=['device_fingerprint_hash'], name='events_devi_device__6111aa_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['check_in_opens_at', 'check_in_closes_at'], name='events_even_check_i_fc4d2f_idx'),
        ),
        migrations.AddIndex(
            model_name='eventticket',
            index=models.Index(fields=['event', 'status'], name='events_even_event_i_60014e_idx'),
        ),
        migrations.AddIndex(
            model_name='eventticket',
            index=models.Index(fields=['user', 'status'], name='events_even_user_id_b38231_idx'),
        ),
        migrations.AddIndex(
            model_name='eventticket',
            index=models.Index(fields=['server_token'], name='events_even_server__858a76_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventticket',
            unique_together={('event', 'user')},
        ),
        migrations.AddIndex(
            model_name='checkin',
            index=models.Index(fields=['event', 'result', 'created_at'], name='events_chec_event_i_74f57f_idx'),
        ),
        migrations.AddIndex(
            model_name='checkin',
            index=models.Index(fields=['ticket', 'created_at'], name='events_chec_ticket__57422b_idx'),
        ),
        migrations.AddIndex(
            model_name='checkin',
            index=models.Index(fields=['scanner_user', 'created_at'], name='events_chec_scanner_6481ef_idx'),
        ),
    ]
