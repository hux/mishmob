# Production Docker Compose for EC2 Deployment
version: '3.8'

services:
  # Frontend (Nginx serving static files)
  frontend:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./dist:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    restart: unless-stopped

  # Backend (Django + Ninja API)
  backend:
    image: ${ECR_REGISTRY}/mishmob-backend:latest
    ports:
      - "8000:8000"
    environment:
      # Database
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${AURORA_ENDPOINT}:5432/${DB_NAME}
      
      # Django Settings
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=False
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${S3_BUCKET_NAME}
      - AWS_S3_REGION_NAME=${AWS_REGION}
      
      # CORS Settings
      - CORS_ALLOWED_ORIGINS=${FRONTEND_URL}
      
      # Redis for caching (optional)
      - REDIS_URL=${REDIS_URL}
    volumes:
      - backend_media:/app/media
      - backend_static:/app/static
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  backend_media:
  backend_static:
  redis_data:

networks:
  default:
    driver: bridge